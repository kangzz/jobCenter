<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
	                   http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/task  
		   http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
<!--                        注解管理 start                     -->
	
	<!-- 自动扫描 -->  
    <context:component-scan base-package="com.jobCenter">
    <!-- 不扫描Controller spring只关注service和dao层-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
	<context:annotation-config/>
<!--                        注解管理  end                      -->
    
    
<!--                      加载配置文件 start                    -->
	
	<!-- 方式1 -->
	<context:property-placeholder location="classpath:/db.${env}.properties,classpath:/system.${env}.properties"/>
	<!-- 方式2
	<bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:/db.${env}.properties,classpath:/system.${env}.properties" />
    </bean>
     -->

	<import resource="spring-config-shiro.xml"/>
<!--                      加载配置文件 end                      -->

<!--                      配置数据源 start                      -->
	
	<!-- 配置数据源 dbcp-->
	<!-- class="org.apache.commons.dbcp.BasicDataSource" -->
	<!--
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="maxIdle" value="5"/>
	</bean>
	-->
	<!-- 使用Gruid连接池[性能好|扩展性强] -->
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${Gruid.driver}"/>
		<property name="url" value="${Gruid.url}"/>
		<property name="username" value="${Gruid.username}"/>
		<property name="password" value="${Gruid.password}"/>
		<!--<property name="filters" value="stat" />
		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		-->
		<property name="initialSize" value="2"/>
		<property name="minIdle" value="1"/>
		<property name="maxActive" value="3"/>
		<property name="validationQuery" value="select 1 from dual"></property>
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="filters" value="stat,slf4j"/>
	</bean>

<!--                      配置数据源 end                       -->


<!--                    加载sqlSessionFactory start          -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />

		<property name="mapperLocations">
			<list>
				<value>classpath:com/jobCenter/mapper/*.xml</value>
			</list>
		</property>

	</bean>
<!--                    加载sqlSessionFactory end          -->




	<!-- 加载mapper接口 -->
	<!-- 
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="cn.ziroom.mybatis.mapper.UserMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	-->
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<!-- -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.jobCenter.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>  
  	 
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx  -->  
    <!--  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    
     <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
  
  	<!--事物管理配置-->
  	
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
	        <tx:method name="select*" propagation="SUPPORTS" />
	        <tx:method name="get*" propagation="SUPPORTS" />
	        <tx:method name="find*" propagation="SUPPORTS" />
	        <tx:method name="*" propagation="REQUIRED" />
       	</tx:attributes>
    </tx:advice>
    
    <!-- 配置数据库注解aop -->
    <!--  
    <bean id="manyDataSourceAspect" class="cn.ziroom.mybatis.ms.DataSourceAspect" />
    <aop:config>
        <aop:aspect id="c" ref="manyDataSourceAspect">
            <aop:pointcut id="tx" expression="execution(* cn.ziroom.mybatis.mapper.*.*(..))"/>
            <aop:before pointcut-ref="tx" method="before"/>
        </aop:aspect>
    </aop:config>
    -->
    <!-- 配置数据库注解aop -->  
    
    <aop:config>
        <aop:pointcut id="interceptorPoint"
            expression="execution(* com.jobCenter.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice"
            pointcut-ref="interceptorPoint" />        
    </aop:config>

	<!--<bean id="exceptionLog" class="com.jobCenter.interceptor.ExceptionLog" />
	<aop:config>
		<aop:aspect id="exceptionCatchMapper" ref="exceptionLog">
			<aop:pointcut id="expect1" expression="execution(* com.jobCenter.service..*.*(..))"/>
			<aop:before pointcut-ref="expect1" method="afterThrowing"/>
		</aop:aspect>
	</aop:config>
	-->
	<bean id="exceptionLog" class="com.jobCenter.interceptor.ExceptionLog"></bean>
	<!-- beanName自动代理 -->
	<bean id="logAdvice"
		  class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>jobService</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>exceptionLog</value>
			</list>
		</property>
	</bean>

</beans>
